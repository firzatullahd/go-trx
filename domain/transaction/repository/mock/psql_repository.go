// Code generated by MockGen. DO NOT EDIT.
// Source: psql_repository.go
//
// Generated by this command:
//
//	mockgen -source=psql_repository.go -destination=./mock/psql_repository.go -package=repository
//
// Package repository is a generated GoMock package.
package repository

import (
	context "context"
	model "go-trx/domain/transaction/model"
	reflect "reflect"

	sqlx "github.com/jmoiron/sqlx"
	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// CalculateBalance mocks base method.
func (m *MockRepository) CalculateBalance(ctx context.Context, tx *sqlx.Tx, accountID uint64) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CalculateBalance", ctx, tx, accountID)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CalculateBalance indicates an expected call of CalculateBalance.
func (mr *MockRepositoryMockRecorder) CalculateBalance(ctx, tx, accountID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CalculateBalance", reflect.TypeOf((*MockRepository)(nil).CalculateBalance), ctx, tx, accountID)
}

// InsertTransaction mocks base method.
func (m *MockRepository) InsertTransaction(ctx context.Context, tx *sqlx.Tx, payload model.AccountTransaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertTransaction", ctx, tx, payload)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertTransaction indicates an expected call of InsertTransaction.
func (mr *MockRepositoryMockRecorder) InsertTransaction(ctx, tx, payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertTransaction", reflect.TypeOf((*MockRepository)(nil).InsertTransaction), ctx, tx, payload)
}

// WithTransaction mocks base method.
func (m *MockRepository) WithTransaction() (*sqlx.Tx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithTransaction")
	ret0, _ := ret[0].(*sqlx.Tx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WithTransaction indicates an expected call of WithTransaction.
func (mr *MockRepositoryMockRecorder) WithTransaction() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTransaction", reflect.TypeOf((*MockRepository)(nil).WithTransaction))
}
