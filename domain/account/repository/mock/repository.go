// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go
//
// Generated by this command:
//
//	mockgen -source=repository.go -destination=./mock/repository.go -package=repository
//
// Package repository is a generated GoMock package.
package repository

import (
	context "context"
	model "go-trx/domain/account/model"
	reflect "reflect"

	sqlx "github.com/jmoiron/sqlx"
	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// AccountBalance mocks base method.
func (m *MockRepository) AccountBalance(ctx context.Context, userID uint64) (model.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AccountBalance", ctx, userID)
	ret0, _ := ret[0].(model.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AccountBalance indicates an expected call of AccountBalance.
func (mr *MockRepositoryMockRecorder) AccountBalance(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccountBalance", reflect.TypeOf((*MockRepository)(nil).AccountBalance), ctx, userID)
}

// InsertAccount mocks base method.
func (m *MockRepository) InsertAccount(ctx context.Context, tx *sqlx.Tx, userID uint64) (model.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertAccount", ctx, tx, userID)
	ret0, _ := ret[0].(model.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertAccount indicates an expected call of InsertAccount.
func (mr *MockRepositoryMockRecorder) InsertAccount(ctx, tx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertAccount", reflect.TypeOf((*MockRepository)(nil).InsertAccount), ctx, tx, userID)
}

// UpdateBalance mocks base method.
func (m *MockRepository) UpdateBalance(ctx context.Context, tx *sqlx.Tx, accountID uint64, balance float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBalance", ctx, tx, accountID, balance)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBalance indicates an expected call of UpdateBalance.
func (mr *MockRepositoryMockRecorder) UpdateBalance(ctx, tx, accountID, balance any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBalance", reflect.TypeOf((*MockRepository)(nil).UpdateBalance), ctx, tx, accountID, balance)
}
